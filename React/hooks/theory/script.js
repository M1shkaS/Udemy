// Хуки появились в  версии 16.8
// Обновлять бибилиотеку или нет это решение команды
// Хуки - это функции, которые позволяют делать тоже самое, что было в классах только внутри функциональных компонентов
// С помощью хуков код становится чуть проще в плане организации
// Не все фичи из классовых компю работают в функциональных
// Классы чуть хуже оптимизируетются, чем функции

// Правила работы с хуками:
// 1. Хуки следует вызывать только на верхнем уровне(не вызывать внутри условий, циклов или вложенных функций)
// 2. Хуки следует вызывать только из функциональных компонентов реакта(их не надо вызывать из обыченых js функций)

// batching - это когда реакт обьединяет несколько изменений состояний в одну операцию для улучшения производительности

//useId — это хук для генерации уникальных идентификаторов, которые стабильны на сервере и клиенте, избегая при этом несоответствий гидратации.
// function Checkbox() {
//   const id = useId();
//   return (
//     <>
//       <label htmlFor={id}>Do you like React?</label>
//       <input id={id} type="checkbox" name="react"/>
//     </>
//   );
// };
// useId не предназначен для генерации ключей в списке. Ключи должны быть сгенерированы из ваших данных.


// В 18 версии был добавлен экспериментальный режим. Т.е реакт внутри себя может делать сразу несколько рендоров или ставить их на паузу, отдавая приоритет чему-нибудь
// и некоторые другие процессы. Они происходят без нашего участия

// Маршрутизация - переключение между частями приложения

// Динамический import всегда возвращает promise

// Три подхода построения приложений:
//1. Всё хранится в одном месте(как в todo)
//2. Всё хранится в своих компонентах(как в marvel)
//3. Всё хранится в одном глобальном месте(как в первом, но достучаться проще)

// Контекст(не путать с this) нужен для того, чтобы определённые данные передавать ниже по иерархии компонентов не используя props-ы

// SEO -  поисковая отптимизация

// server site rendering -  рендерин приложения на стороне сервера, когда поисковому роботу будет отдаваться готовая страница(next.js)
//Prerendering - создаём продкашн приложение, то дополнительно мы сохраняем html копии страницы, которые у нас есть в приложении(react-snap)

//react helmet


// Конечный автомат(FSM - finite-state machine) - такая сущность, которая имеет определённое кол-во состояний(например кнопка)
// Базовые принципы:
// 1. Конечное кол-во состояний
// 2. Только одно активное состояние
// 3. Механизм перехода
// 4.Удобный функционал отображения